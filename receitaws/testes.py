# AUTOGENERATED! DO NOT EDIT! File to edit: ..\notebooks\testes.ipynb.

# %% auto 0
__all__ = ["TestParametros"]

# %% ..\notebooks\testes.ipynb 2
import pytest
from validate_docbr import CPF, CNPJ
from .requisicoes import Requisicao


# %% ..\notebooks\testes.ipynb 4
class TestParametros:
    @pytest.fixture
    def requisicao(self):
        cpf = CPF().generate()
        # Instantiate Requisicao class with default parameters for testing
        return Requisicao(cpf_usuario=cpf, tipo="cpf", origem="Test", ambiente="hm")

    # Test case for valid parameters
    def test_valid_parameters(self, requisicao):
        assert requisicao.tipo == "cpf"
        assert requisicao.origem == "Test"
        assert requisicao.ambiente == "hm"

    # Test case for valid CPF
    def test_valid_cpf(self, requisicao):
        assert CPF().validate(requisicao.cpf_usuario)

    # Test case for valid tipo
    @pytest.mark.parametrize("tipo", ["cpf", "cnpj"])
    def test_valid_tipo(self, tipo):
        cpf = CPF().generate()
        requisicao = Requisicao(
            cpf_usuario=cpf, tipo=tipo, origem="Test", ambiente="hm"
        )
        assert requisicao.tipo == tipo

    # Test case for valid ambiente
    @pytest.mark.parametrize("ambiente", ["ds", "hm", "pd"])
    def test_valid_ambiente(self, ambiente):
        cpf = CPF().generate()
        requisicao = Requisicao(
            cpf_usuario=cpf, tipo="cpf", origem="Test", ambiente=ambiente
        )
        assert requisicao.ambiente == ambiente

    # Test case for valid origem
    def test_valid_origem(self, requisicao):
        assert requisicao.origem == "Test"

    # Test case for invalid tipo
    def test_invalid_tipo(self, requisicao):
        with pytest.raises(ValueError):
            requisicao.tipo = "invalid_tipo"

    # Test case for invalid ambiente
    def test_invalid_ambiente(self, requisicao):
        with pytest.raises(ValueError):
            requisicao.ambiente = "invalid_ambiente"

    # Test case for invalid CPF
    def test_invalid_cpf(self):
        with pytest.raises(ValueError):
            Requisicao(
                cpf_usuario="invalid_cpf", tipo="cpf", origem="Test", ambiente="hm"
            )

    # Test case for invalid origem
    def test_invalid_origem(self, requisicao):
        with pytest.raises(ValueError):
            requisicao.origem = ""
